---
description: 
globs: 
alwaysApply: false
---
# React Hook Form & Zod 사용 규칙

## 1. 기본 구조

### 1.1 스키마 정의
```typescript
// 1. 기본 스키마
const baseSchema = z.object({
  id: z.string(),
  createdAt: z.date(),
});

// 2. 확장 스키마
const extendedSchema = baseSchema.extend({
  name: z.string(),
  email: z.string().email(),
});

// 3. 조건부 스키마
const conditionalSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal("A"),
    fieldA: z.string(),
  }),
  z.object({
    type: z.literal("B"),
    fieldB: z.number(),
  }),
]);
```

### 1.2 타입 정의
```typescript
// 1. 기본 타입
type FormValues = z.infer<typeof schema>;

// 2. 조건부 타입
type FormValues = z.infer<typeof conditionalSchema>;
type TypeAValues = Extract<FormValues, { type: "A" }>;
type TypeBValues = Extract<FormValues, { type: "B" }>;
```

### 1.3 컴포넌트 구조
```typescript
// 1. 메인 폼 컴포넌트
export default function FormComponent() {
  const form = useForm<FormValues>({
    resolver: zodResolver(schema),
    defaultValues: {
      // 기본값 설정
    },
    mode: "onChange",
  });

  const onSubmit = (data: FormValues) => {
    // 제출 로직
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormFields />
      </form>
    </Form>
  );
}

// 2. 하위 컴포넌트
function FormFields() {
  const form = useFormContext<FormValues>();
  
  return (
    <FormField
      control={form.control}
      name="fieldName"
      render={({ field }) => (
        <FormItem>
          <FormLabel>라벨</FormLabel>
          <FormControl>
            <Input {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
```

## 2. 모범 사례

### 2.1 폼 설정
```typescript
const form = useForm<FormValues>({
  // 1. 실시간 유효성 검사
  mode: "onChange",
  
  // 2. 초기값 설정
  defaultValues: {
    field1: "",
    field2: [],
  },
  
  // 3. 유효성 검사 시점
  reValidateMode: "onChange",
  
  // 4. 폼 상태 변경 감지
  onChange: (data) => {
    console.log("폼 데이터 변경:", data);
  },
});
```

### 2.2 유효성 검사
```typescript
const schema = z.object({
  // 1. 필수 필드
  requiredField: z.string({
    required_error: "필수 입력 항목입니다",
  }),
  
  // 2. 선택적 필드
  optionalField: z.string().optional(),
  
  // 3. 기본값이 있는 필드
  defaultField: z.string().default("기본값"),
  
  // 4. 유효성 검사가 있는 필드
  validatedField: z.string()
    .min(1, "최소 1자 이상 입력해주세요")
    .max(10, "최대 10자까지 입력 가능합니다"),
    
  // 5. 배열 필드
  arrayField: z.array(z.string())
    .min(1, "최소 1개 이상 선택해주세요"),
    
  // 6. 중첩 객체
  nestedObject: z.object({
    field1: z.string(),
    field2: z.number(),
  }),
});
```

### 2.3 조건부 유효성 검사
```typescript
const schema = z.object({
  type: z.enum(["A", "B"]),
  fieldA: z.string().optional().refine(
    (val) => {
      if (type === "A") return !!val;
      return true;
    },
    { message: "A 타입일 때는 필수입니다" }
  ),
});
```

## 3. 주의사항

### 3.1 타입 안전성
- `z.infer`를 사용하여 스키마에서 타입 추론
- 제네릭 타입을 명시적으로 지정
```typescript
type FormValues = z.infer<typeof schema>;
const form = useForm<FormValues>();
```

### 3.2 성능 최적화
- `mode: "onChange"`는 필요한 경우에만 사용
- 불필요한 리렌더링 방지를 위해 필요한 필드만 구독
```typescript
// 필요한 필드만 구독
const [field1, field2] = useWatch({
  name: ["field1", "field2"],
  control: form.control,
});
```

### 3.3 에러 처리
- 에러 메시지는 사용자 친화적으로 작성
- 필드별로 구체적인 에러 메시지 제공
```typescript
const schema = z.object({
  password: z.string()
    .min(8, "비밀번호는 8자 이상이어야 합니다")
    .regex(/[A-Z]/, "대문자를 포함해야 합니다")
    .regex(/[0-9]/, "숫자를 포함해야 합니다"),
});
```

### 3.4 폼 상태 관리
- 복잡한 폼은 상태를 적절히 분리
- `useFormContext`를 사용하여 하위 컴포넌트에서 폼 상태 접근
```typescript
function SubComponent() {
  const form = useFormContext<FormValues>();
  // ...
}
```

### 3.5 디버깅
- 개발 시 `form.formState`를 활용하여 폼 상태 모니터링
```typescript
console.log({
  errors: form.formState.errors,
  isDirty: form.formState.isDirty,
  isSubmitting: form.formState.isSubmitting,
});
```

## 4. 자주 사용되는 패턴

### 4.1 체크박스 그룹
```typescript
<FormField
  control={form.control}
  name="selectedItems"
  render={({ field }) => (
    <FormItem>
      <FormLabel>항목 선택</FormLabel>
      <div className="grid grid-cols-2 gap-4">
        {options.map(({ label, value }) => (
          <div className="flex items-center space-x-2" key={value}>
            <Checkbox
              checked={field.value?.includes(value)}
              onCheckedChange={(checked) => {
                const currentValue = field.value || [];
                if (checked) {
                  field.onChange([...currentValue, value]);
                } else {
                  field.onChange(currentValue.filter((v) => v !== value));
                }
              }}
            />
            <Label>{label}</Label>
          </div>
        ))}
      </div>
      <FormMessage />
    </FormItem>
  )}
/>
```

### 4.2 라디오 버튼 그룹
```typescript
<FormField
  control={form.control}
  name="type"
  render={({ field }) => (
    <FormItem>
      <FormLabel>타입 선택</FormLabel>
      <FormControl>
        <RadioGroup
          onValueChange={field.onChange}
          defaultValue={field.value}
        >
          {options.map(({ label, value }) => (
            <div className="flex items-center space-x-2" key={value}>
              <RadioGroupItem value={value} />
              <Label>{label}</Label>
            </div>
          ))}
        </RadioGroup>
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
```

### 4.3 셀렉트 박스
```typescript
<FormField
  control={form.control}
  name="category"
  render={({ field }) => (
    <FormItem>
      <FormLabel>카테고리</FormLabel>
      <Select
        onValueChange={field.onChange}
        defaultValue={field.value}
      >
        <SelectTrigger>
          <SelectValue placeholder="선택하세요" />
        </SelectTrigger>
        <SelectContent>
          {options.map(({ label, value }) => (
            <SelectItem key={value} value={value}>
              {label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      <FormMessage />
    </FormItem>
  )}
/>
```

## 5. 성능 최적화

### 5.1 useWatch vs useFormContext
```typescript
// 1. useWatch 사용 (특정 필드만 구독)
function WatchComponent() {
  // 단일 필드 구독
  const value = useWatch({
    name: "fieldName",
  });

  // 여러 필드 구독
  const [field1, field2] = useWatch({
    name: ["field1", "field2"],
  });

  // 전체 폼 구독 (주의: 성능에 영향을 줄 수 있음)
  const formValues = useWatch();

  return (
    <div>
      <p>현재 값: {value}</p>
      <p>필드1: {field1}</p>
      <p>필드2: {field2}</p>
    </div>
  );
}

// 2. useFormContext 사용 (전체 폼 컨텍스트 접근)
function ContextComponent() {
  const form = useFormContext<FormValues>();
  
  // 특정 필드 값만 필요할 때는 useWatch 사용 권장
  const value = useWatch({
    name: "fieldName",
    control: form.control,
  });

  return (
    <div>
      <p>현재 값: {value}</p>
    </div>
  );
}
```

### 5.2 getValues 활용
```typescript
function FormComponent() {
  const form = useForm<FormValues>();

  // 1. 단일 필드 값 가져오기
  const handleClick = () => {
    const value = form.getValues("fieldName");
    console.log(value);
  };

  // 2. 여러 필드 값 가져오기
  const handleSubmit = () => {
    const [field1, field2] = form.getValues(["field1", "field2"]);
    console.log(field1, field2);
  };

  // 3. 전체 폼 값 가져오기
  const handleSave = () => {
    const allValues = form.getValues();
    console.log(allValues);
  };

  return (
    <form>
      <button type="button" onClick={handleClick}>
        값 확인
      </button>
    </form>
  );
}
```

### 5.3 Controller vs register
```typescript
// 1. Controller 사용 (커스텀 컴포넌트)
function CustomInput() {
  return (
    <Controller
      name="fieldName"
      render={({ field, fieldState }) => (
        <div>
          <input
            {...field}
            className={fieldState.error ? "error" : ""}
          />
          {fieldState.error && (
            <span>{fieldState.error.message}</span>
          )}
        </div>
      )}
    />
  );
}

// 2. register 사용 (기본 HTML 요소)
function BasicInput() {
  const { register } = useForm();
  
  return (
    <div>
      <input
        {...register("fieldName", {
          required: "필수 입력 항목입니다",
          minLength: {
            value: 2,
            message: "최소 2자 이상 입력해주세요",
          },
        })}
      />
    </div>
  );
}

// 3. Controller와 register 혼합 사용
function MixedForm() {
  const { register, control } = useForm();

  return (
    <form>
      {/* 기본 입력 필드 */}
      <input {...register("basicField")} />

      {/* 커스텀 컴포넌트 */}
      <Controller
        name="customField"
        control={control}
        render={({ field }) => (
          <CustomComponent {...field} />
        )}
      />

      {/* 조건부 렌더링 */}
      {showAdvanced && (
        <Controller
          name="advancedField"
          control={control}
          render={({ field }) => (
            <AdvancedComponent {...field} />
          )}
        />
      )}
    </form>
  );
}
```

### 5.4 성능 최적화 팁
```typescript
function OptimizedForm() {
  const form = useForm<FormValues>();

  // 1. 필요한 필드만 구독
  const watchedField = useWatch({
    name: "importantField",
    control: form.control,
  });

  return (
    <form>
      <FormField
        control={form.control}
        name="complexField"
        render={({ field }) => (
          <ComplexComponent {...field} />
        )}
      />
      <button type="submit">제출</button>
    </form>
  );
}
```

### 5.5 상황별 권장 패턴

#### 5.5.1 단순 폼
```typescript
// register 사용 권장
function SimpleForm() {
  const { register, handleSubmit } = useForm();

  return (
    <form>
      <input {...register("name")} />
      <input {...register("email")} />
      <button type="submit">제출</button>
    </form>
  );
}
```

#### 5.5.2 복잡한 폼
```typescript
// Controller와 useWatch 혼합 사용 권장
function ComplexForm() {
  const form = useForm<FormValues>();
  const importantValue = useWatch({
    name: "importantField",
    control: form.control,
  });

  return (
    <form>
      <Controller
        name="customField"
        control={form.control}
        render={({ field }) => (
          <CustomComponent {...field} />
        )}
      />
      <input {...form.register("simpleField")} />
      <div>중요 값: {importantValue}</div>
    </form>
  );
}
```

#### 5.5.3 동적 폼
```typescript
// useFieldArray와 Controller 조합 사용 권장
function DynamicForm() {
  const { control } = useForm();
  const { fields, append, remove } = useFieldArray({
    control,
    name: "items",
  });

  return (
    <form>
      {fields.map((field, index) => (
        <Controller
          key={field.id}
          name={`items.${index}.value`}
          control={control}
          render={({ field }) => (
            <input {...field} />
          )}
        />
      ))}
      <button type="button" onClick={() => append({ value: "" })}>
        항목 추가
      </button>
    </form>
  );
}
```
