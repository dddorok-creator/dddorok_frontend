name: Deploy Web & Admin to Vercel (manual-selectable)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "배포할 앱 선택"
        required: true
        default: "all"
        type: choice
        options: [all, web, admin]

# ────────────────────────── WEB ──────────────────────────
jobs:
  deploy-web:
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'web' }}
    runs-on: ubuntu-latest
    concurrency: web-prod
    env:
      APP_DIR:           ${{ github.workspace }}              # 루트 기준
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID:     ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      PROD_ALIAS:        "web.dddorok.vercel.app"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm@9
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install deps
        run: |
          echo "PWD: $(pwd)"
          pnpm install --frozen-lockfile

      # ─── Pull & Build (prebuilt) ───
      - name: Vercel Pull
        run: |
          echo "→ vercel pull"
          npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"

      - name: Vercel Build
        run: |
          npx vercel build --prod --token="$VERCEL_TOKEN"
          echo "▶ Build output"
          ls -al .vercel/output

      # ─── Deploy (prebuilt) ───
      - name: Vercel Deploy
        id: deploy-web
        run: |
          echo "PWD: $(pwd)"
          ls -al .vercel/output || { echo "❌ .vercel/output not found"; exit 1; }
          DEPLOY_URL=$(npx vercel deploy . --prebuilt --prod --yes --token="$VERCEL_TOKEN" | tail -1)
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
          echo "▶ Deployed → $DEPLOY_URL"

      # ─── Slack 알림 ───
      - name: Slack Notify Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "✅ *배포 성공 - dddorok-frontend-web* 🚀\n\n*커밋 메시지:* \n${{ github.event.head_commit.message }}\n\n*커밋 링크:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|🔗 확인하기>\n*워크플로우:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|🛠 Action 확인하기>\n\n<@U08KFM61DPZ>"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 *배포 실패 - dddorok-frontend-web* 🚨\n\n*커밋 메시지:* \n${{ github.event.head_commit.message }}\n\n*커밋 링크:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|🔗 확인하기>\n*워크플로우:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|🛠 Action 확인하기>\n\n🔴 즉시 확인 및 조치 요망! <@U08KFM61DPZ>"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

# ───────────────────────── ADMIN ──────────────────────────
  deploy-admin:
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'admin' }}
    runs-on: ubuntu-latest
    concurrency: admin-prod
    env:
      APP_DIR:           ${{ github.workspace }}              # 동일 루트
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID:     ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}
      PROD_ALIAS:        "admin.dddorok.vercel.app"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm@9
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # Pull & Build
      - name: Vercel Pull
        run: npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"

      - name: Vercel Build
        run: |
          npx vercel build --prod --token="$VERCEL_TOKEN"
          ls -al .vercel/output

      # Deploy
      - name: Vercel Deploy
        id: deploy-admin
        run: |
          DEPLOY_URL=$(npx vercel deploy . --prebuilt --prod --yes --token="$VERCEL_TOKEN" | tail -1)
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
          echo "▶ Deployed → $DEPLOY_URL"

      # Slack
      - name: Slack Notify Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "✅ *배포 성공 - dddorok-frontend-admin* 🚀\n\n*커밋 메시지:* \n${{ github.event.head_commit.message }}\n\n*커밋 링크:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|🔗 확인하기>\n*워크플로우:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|🛠 Action 확인하기>\n\n<@U08KFM61DPZ>"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 *배포 실패 - dddorok-frontend-admin* 🚨\n\n*커밋 메시지:* \n${{ github.event.head_commit.message }}\n\n*커밋 링크:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|🔗 확인하기>\n*워크플로우:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|🛠 Action 확인하기>\n\n🔴 즉시 확인 및 조치 요망! <@U08KFM61DPZ>"
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
